Roadmap
=======

- Dependency Injection (Falko)
    - Write tests for wrapper methods
    - Write documentation of the methods introduced for the dependency injection mechanism
    - Add a comment about their purpose to the wrapper methods:
        This method makes it easier to extend this class and improves the documentation of the ezcReflection component.
        enables Dependency Injection (only in case of static methods)
- Fix Tests
- Test Coverage (Sebastian)
    - Test ezcReflectionParameter::__construct, since PHP Manual states:
      "To introspect function parameters, you will first have to create an
      instance of the ReflectionFunction or ReflectionMethod classes and then
      use their getParameters() method to retrieve an array of parameters."
    - Maybe reuse phpt test cases of the Reflection extension
- Refactoring (Falko)
    - Introduce a third optional parameter called 'type' to the constructor of ezcReflectionParameter
    - Introduce a ezcReflectionReflector interface
    - Rename DocTag/Tag into Annotation in all class, interface, method, property, and parameter names, e.g., getAnnotations & isAnnotatedWith
    - Rename src/interfaces/parser.php into annotation_parser.php
    - Complete the adoption of the eZ Components coding standard
    - Parse comments on demand to save CPU time and memory, when creating large amounts of reflection objects
    - Maybe create instances of ezcReflectionClassType through type factory
- Missing Features (?)
    - Add support for mixed type
    - Add support pipe notation in type definitions, i.e. @param datatype1|datatype2 $paramname description
    - Use type hints for type introspection if they are available
    - See todo annotations in the source code, e.g., using 'grep -inor todo.* --exclude-dir=.svn .'
    - Implement getCode methods (Sebastian)
    - support for annotation grouping especially for properties (has to be supported by PHP, maybe a feature for StaticReflection)
    - throw ezcReflectionUnknownTypeException during XML Schema generation
    - obtain type information for internal functions from PHP's source code
- Tutorial (?)
- Documentation about available annotations (?)
    (see https://instantsvc.svn.sourceforge.net/svnroot/instantsvc/branches/transition/doc/style-guide.html)
- Integration of Toby's annotation parser? (Toby?)


Depending Projects
==================

- ezcWsdl based on ezcReflection
    - Can PHPT tests from the SOAP extension be reused?

- StaticReflection (an implementation of PHP's Reflection API using static source code analysis)
    - Parser which generates objects implementing ReflectionAPI
        - Reuse phuml parser?
            - open issues?
        - Reuse function/method body parser from phpDepend or phpCallGraph?
    - API Design for additional features StaticReflection
        - Call and Dependency Analysis (e.g. getCallers, getCallees, getAccessedProperties, getAccessedSqlTables)
        - Code Generation (e.g. save)
        - Code Editing (e.g. addProperty, addMethod, addParameter, setCode, setName, copy, delete)
        - Refactoring (e.g. setParentClass, emancipate, moveToParent)
        - XMI Export (could perhaps go into ezcReflection)
    - StaticReflection objects should be able to be created through
        - Source code (static analysis of the files)
        - (ezc)Reflection objects
        - Manually calling API methods
        - XMI import
