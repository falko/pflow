<?xml version="1.0" encoding="UTF-8"?>
<project name="common-ant-targets" basedir=".">

    <!--
        Some common settings for all project.
    -->
    <property name="builddir" value="${basedir}/build" />
    <property name="scriptdir" value="${basedir}/setup/scripts" />

    <target name="dist" depends="build,tag,pack" description="Default distribution build" />

    <target name="clean">
        <delete dir="${builddir}" includeemptydirs="true" />
    </target>

    <target name="update">
        <exec dir="${basedir}" executable="svn">
            <arg line="up" />
        </exec>
    </target>

    <target name="prepare" depends="clean,update">
        <mkdir dir="${builddir}" />
        <mkdir dir="${builddir}/logs" />
        <mkdir dir="${builddir}/coverage" />
    </target>

    <!--
        Tests several aspects of the project.

        - Unit Tests
        - Other Tests
        - Static code analysis
        - Lint checks
    -->
    <target name="test" depends="prepare,checkstyle,lint,alltest,unittest" />

    <!--
        Performance syntax error checks on the project sources.
    -->
    <target name="lint">
        <apply executable="php" failonerror="true">
            <arg value="-l" />
            <fileset dir="${basedir}/source">
                <include name="**/*.php" />
            </fileset>
            <fileset dir="${basedir}/test">
                <include name="**/*.php" />
                <exclude name="_source/**" />
            </fileset>
        </apply>
    </target>

    <!--
        Executes all tests for a project, includes unit, functional, integration
        or compatibility tests. 
    -->
    <target name="alltest">
        <exec dir="${basedir}/test" failonerror="true" executable="phpunit">
            <arg line="AllTests.php" />
        </exec>
    </target>

    <!--
        Executes all unittests for a project and collects the coverage data for
        the project sources.
    -->
    <target name="unittest">
        <exec dir="${basedir}/test" failonerror="true" executable="phpunit">
            <arg line="--group unittest" />
            <arg line="--coverage-html   ${basedir}/build/coverage" />
            <arg line="--coverage-clover ${basedir}/build/logs/clover.xml" />
            <arg line="--log-junit       ${basedir}/build/logs/junit.xml" />
            <arg line="AllTests.php" />
        </exec>
    </target>

    <!--
        Validates that the project code is compatible with the project's coding
        conventions.
    -->
    <target name="checkstyle">
        <exec dir="${basedir}" failonerror="true" executable="phpcs">
            <arg line="--standard=${coding.standard}" />
            <arg line="--report=checkstyle" />
            <arg line="--report-file=${basedir}/build/logs/checkstyle.xml" />
            <arg line="${basedir}/source" />
        </exec>
    </target>

    <!--
        Creates binaries of the current project.
    -->
    <target name="pack" depends="pack-phar-archive,pack-pear-archive" />

    <!--
        Creates a phar archive of the project source
    -->
    <target name="pack-phar-archive" depends="prepare">
        <exec dir="${basedir}" executable="${scriptdir}/create.phar.php">
            <arg line="${ant.project.name}" />
            <arg line="${builddir}" />
            <arg line="${basedir}/source" />
        </exec>
    </target>

    <!--
        Creates a pear archive of the project source
    -->
    <target name="pack-pear-archive" depends="prepare">
        <!--
            TODO: Auto update the pear manifest
        -->

        <copy todir="${builddir}/source/${ant.project.name}">
            <fileset dir="${basedir}/source"/>
        </copy>

        <copy todir="${builddir}/source/docs">
            <fileset dir="${basedir}/docs"/>
        </copy>

        <copy file="${basedir}/LICENSE" todir="${builddir}/source" />
        <copy file="${basedir}/CHANGELOG" todir="${builddir}/source" />

        <tstamp>
            <format property="build.date" pattern="yyyy-MM-dd" />
        </tstamp>

        <copy file="${basedir}/package.xml" tofile="${builddir}/source/package.xml">
            <filterchain>
                <replacestring from='"source"' to='"${ant.project.name}"' />
                <replacestring from="1970-01-01" to="${build.date}" />
                <replacestring from="0.0.0" to="${project.version}" />
                <replacestring from="devel" to="${project.stability}" />
            </filterchain>
        </copy>

        <exec dir="${builddir}" executable="pear">
            <arg line="package" />
            <arg line="source/package.xml" />
        </exec>
    </target>

    <!--
        Automatically creates a repopositoy tag when all tests have passed.
    -->
    <target name="tag" depends="test-is-svn-checkout,tag-if-project-is-svn-checkout" />

    <target name="test-is-svn-checkout">
        <available file="${basedir}/.svn" property="is-svn-checkout" />
    </target>

    <target name="tag-if-project-is-svn-checkout" depends="init-repository-properties,init-tag-properties" if="is-svn-checkout">
        <property name="tag.repo" value="${repository}/tags" />
        <property name="tag.name" value="${build.year}-kw${build.week}-qa-build${build.number}" />

        <property name="tag.msg" value="# Auto created tag ${build.number} after successful build." />

        <echo message="svn copy . ${tag.repo}/${tag.name}" />
        <exec dir="${basedir}" executable="svn">
            <arg line="copy -m '${tag.msg}' . ${tag.repo}/${tag.name}" />
        </exec>
    </target>

    <!--
        Initializes some properties based on the source repository.
    -->
    <target name="init-repository-properties" depends="prepare" if="is-svn-checkout">

        <exec executable="svn" dir="${basedir}" output="${builddir}/~svn-info.xml">
            <arg line="info --xml" />
        </exec>

        <xmlproperty file="${builddir}/~svn-info.xml"
                     keepRoot="true"
                     collapseAttributes="true" />

        <property name="repository" value="${info.entry.repository.root}" />
    </target>

    <!--
        Initializes some properties required for automatic tagging
    -->
    <target name="init-tag-properties" if="is-svn-checkout">

        <buildnumber />

        <tstamp>
            <format property="build.year" pattern="yyyy" />
            <format property="build.week" pattern="w" />
        </tstamp>
    </target>

</project>
